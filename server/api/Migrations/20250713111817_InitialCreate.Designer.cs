// <auto-generated />
using System;
using ElevatorSimulationApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElevatorSimulationApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713111817_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.Elevator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentFloor")
                        .HasColumnType("int");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<int>("DoorStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .IsUnique();

                    b.ToTable("Elevators");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.ElevatorCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CallTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DestinationFloor")
                        .HasColumnType("int");

                    b.Property<bool>("IsHandled")
                        .HasColumnType("bit");

                    b.Property<int>("RequestedFloor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("ElevatorCalls");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.ElevatorCallAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignmentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ElevatorCallId")
                        .HasColumnType("int");

                    b.Property<int>("ElevatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorCallId")
                        .IsUnique();

                    b.HasIndex("ElevatorId");

                    b.ToTable("ElevatorCallAssignments");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.Building", b =>
                {
                    b.HasOne("ElevatorSimulationApi.Models.Entities.User", "User")
                        .WithMany("Buildings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.Elevator", b =>
                {
                    b.HasOne("ElevatorSimulationApi.Models.Entities.Building", "Building")
                        .WithOne("Elevator")
                        .HasForeignKey("ElevatorSimulationApi.Models.Entities.Elevator", "BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.ElevatorCall", b =>
                {
                    b.HasOne("ElevatorSimulationApi.Models.Entities.Building", "Building")
                        .WithMany("ElevatorCalls")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.ElevatorCallAssignment", b =>
                {
                    b.HasOne("ElevatorSimulationApi.Models.Entities.ElevatorCall", "ElevatorCall")
                        .WithOne("Assignment")
                        .HasForeignKey("ElevatorSimulationApi.Models.Entities.ElevatorCallAssignment", "ElevatorCallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElevatorSimulationApi.Models.Entities.Elevator", "Elevator")
                        .WithMany("CallAssignments")
                        .HasForeignKey("ElevatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Elevator");

                    b.Navigation("ElevatorCall");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.Building", b =>
                {
                    b.Navigation("Elevator")
                        .IsRequired();

                    b.Navigation("ElevatorCalls");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.Elevator", b =>
                {
                    b.Navigation("CallAssignments");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.ElevatorCall", b =>
                {
                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("ElevatorSimulationApi.Models.Entities.User", b =>
                {
                    b.Navigation("Buildings");
                });
#pragma warning restore 612, 618
        }
    }
}
